name: Build and Release Go Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        go test -bench=. -benchmem ./internal/...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests

  build-binaries:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build Backend Binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        output_name="escoffier-backend-${{ matrix.os }}-${{ matrix.arch }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
          -o "dist/${output_name}" ./cmd/main.go
    
    - name: Build CLI Binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        output_name="escoffier-cli-${{ matrix.os }}-${{ matrix.arch }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        cd cli && CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" \
          -o "../dist/${output_name}" ./main.go
    
    - name: Compress binaries
      run: |
        cd dist
        for file in *; do
          if [ -f "$file" ]; then
            tar -czf "${file}.tar.gz" "$file"
            rm "$file"
          fi
        done
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*

  build-frontend:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache npm modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        npm run test -- --coverage --watchAll=false
    
    - name: Archive frontend build
      run: |
        tar -czf frontend-build.tar.gz -C frontend/build .
    
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend-build.tar.gz

  docker-build:
    needs: [build-binaries, build-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      if: github.event_name == 'push'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' }}
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/escoffier:latest
          ${{ secrets.ACR_LOGIN_SERVER }}/escoffier:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build-binaries, build-frontend, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -exec cp {} release/ \;
        cd release && sha256sum * > checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        body: |
          ## Escoffier Release ${{ github.ref_name }}
          
          ### Downloads
          - Backend binaries for Linux, macOS, and Windows
          - CLI tool for all platforms
          - Frontend build package
          - Docker images available at: `${{ secrets.ACR_LOGIN_SERVER }}/escoffier:${{ github.ref_name }}`
          
          ### Deployment
          See [Azure Deployment Guide](./AZURE_DEPLOYMENT.md) for instructions.
          
          ### Checksums
          SHA256 checksums are available in `checksums.txt`

  deploy-staging:
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Staging
      run: |
        az webapp config container set \
          --name escoffier-staging \
          --resource-group rg-escoffier-staging \
          --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/escoffier:${{ github.sha }}

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Production (Blue-Green)
      run: |
        # Deploy to staging slot first
        az webapp deployment slot create \
          --name escoffier-app \
          --resource-group rg-escoffier-prod \
          --slot staging || true
        
        az webapp config container set \
          --name escoffier-app \
          --resource-group rg-escoffier-prod \
          --slot staging \
          --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/escoffier:${{ github.sha }}
        
        # Wait for health check
        sleep 60
        
        # Swap slots
        az webapp deployment slot swap \
          --name escoffier-app \
          --resource-group rg-escoffier-prod \
          --slot staging \
          --target-slot production